

2.1)
	Note: Max returns the largest cost adjacent to the cell in the table 
	if c[i] > c --> Max(V[i-1, j], V[i, j-1])
	if i > 0 & c >= c[i] --> Max(V[i-1, j], V[i, j-1])
	
2.2)
buildTable(v,c,p,C)
	V[,] = V[0..p.max, 0..c.max]		
	Cost = C
	for i = 1 to p.max  			//L equals p.max	
		V[i,0] = 0
		val = 0
		for j = 1 to c.size			//M equals c.size
			V[0,j] = 0
			for k = 1 to i			//N equals p.max
				if p[k] == i
					max = Max(V[i-1, j], V[i, j-1])
					if c[k] <= j
						if v[k] + V[i-1, j-c[k]] > max
							V[i,j] = v[k] + max
						else V[i,j] = max
					else V[i,j] = max

	Space: LM
	Time: O(LMN)

2.3)
	Build a 3d array describes the chosen players for each node in the table.
	If we do not add any new players, and are taking from an adjacent node, we can just
	copy the the contents of its respective array index. else we just add the new player.
	
	This will allow our lookup time to be constant, since it is just an array lookup.

2.4)
			0	1	2	3	4	5	6	7	8	9	10
		------------------------------------------------
		0|	0	0	0	0	0	0	0	0	0	0	0
		1|	0	0	0	0	4	4	4	4	4	4	4
		2|	0	0	2	2	4	4	6	7	7	8	8	
		3|	0	4	4	6	6	8	8	10	11	11	12
		
		output: 1,3,6