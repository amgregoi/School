<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
chan take, free;

bool forks[5] = {true, true, true, true, true};
int philo[5] = {0, 0, 0, 0, 0};
int eaten[5] = {0, 0, 0, 0, 0};
int numEating = 0;

bool checkForDeadlock(){
	int i, count;
	for(i=0; i&lt;5; i++)
		if(forks[i]) count++;
	if(count &gt; 1 ) return false;
	return true;
}

bool checkFork(int f1, int f2){
	int i;
	if(f2 &gt; 4) f2 = 0;
	
	if(eaten[f1] &gt; 0){
		for(i=0; i&lt;5; i++){
			if(eaten[i] == 0 and philo[f1] == 1) return false;
		}
	}

	if(checkForDeadlock() &amp;&amp; philo[f1] == 1) return false;
	if(forks[f1] &amp;&amp; philo[f1]) return true;
	else if(forks[f2] &amp;&amp; philo[f1]) return true;

	return false;
}

bool checkPhilo(int p1, int p2){
	if(p2 &lt; 0){
		if(philo[p1] == 1 || philo[4] == 1) return true;
	}else{
		if(philo[p1] == 1 || philo[p2] == 1) return true;
	}
	return false;
}

void takeFork(int pos){
	int p2 = pos+1, i;
	if(p2 &gt; 4) p2 = 0;
	if(forks[pos] == 1) forks[pos] = 0;
	else if(forks[p2] == 1) forks[p2] = 0;
	philo[pos]++;
	if(philo[pos] == 3){
		numEating++;
		eaten[pos]++;
	}
	
	for(i=0; i&lt;5; i++){
			if(eaten[i] &lt; 1) return;
	}
	for(i=0; i&lt;5; i++) eaten[i] = 0;
}

void layDownFork(int pos){
	int p2 = pos+1;
	if(p2 &gt; 4) p2 = 0;
	forks[pos] = 1;
	forks[p2] = 1;
	numEating--;
}</declaration><template><name x="5" y="5">Philo</name><parameter>int pos</parameter><declaration>// Place local declarations here.</declaration><location id="id0" x="-48" y="96"></location><location id="id1" x="328" y="96"><name x="400" y="96">isEating</name></location><location id="id2" x="328" y="-32"><name x="318" y="-62">fork1</name></location><location id="id3" x="80" y="-32"><name x="40" y="-72">wantsToEat</name></location><location id="id4" x="-48" y="-168"><name x="-72" y="-200">Thinking</name></location><location id="id5" x="-48" y="-32"><name x="-72" y="-64">Resting</name></location><init ref="id5"/><transition><source ref="id0"/><target ref="id5"/><label kind="synchronisation" x="-88" y="40">free!</label></transition><transition><source ref="id1"/><target ref="id0"/><label kind="synchronisation" x="80" y="96">free!</label><label kind="assignment" x="80" y="112">layDownFork(pos),
philo[pos] := 0</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="assignment" x="0" y="-200">philo[pos]++</label><nail x="80" y="-168"/></transition><transition><source ref="id4"/><target ref="id4"/><nail x="-104" y="-144"/><nail x="-104" y="-192"/></transition><transition><source ref="id4"/><target ref="id5"/><nail x="-32" y="-96"/></transition><transition><source ref="id5"/><target ref="id5"/><nail x="-104" y="-8"/><nail x="-104" y="-64"/></transition><transition><source ref="id5"/><target ref="id4"/><nail x="-64" y="-96"/></transition><transition><source ref="id1"/><target ref="id1"/><nail x="384" y="96"/><nail x="328" y="152"/></transition><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="336" y="0">checkFork(pos, pos+1)</label><label kind="synchronisation" x="336" y="16">take!</label><label kind="assignment" x="336" y="32">takeFork(pos),
eaten[pos]++</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="136" y="-8">checkFork(pos, pos+1)</label><label kind="synchronisation" x="136" y="8">take!</label><label kind="assignment" x="136" y="-24">takeFork(pos)</label></transition><transition><source ref="id5"/><target ref="id3"/><label kind="assignment" x="-32" y="-24">philo[pos]++</label></transition></template><template><name>Fork</name><parameter>int pos</parameter><location id="id6" x="0" y="-64"><name x="-10" y="-94">pickedUp</name></location><location id="id7" x="-160" y="-64"><name x="-170" y="-94">Free</name></location><init ref="id7"/><transition><source ref="id6"/><target ref="id7"/><label kind="synchronisation" x="-88" y="-24">free?</label><nail x="-72" y="-32"/></transition><transition><source ref="id7"/><target ref="id6"/><label kind="synchronisation" x="-96" y="-112">take?</label><nail x="-80" y="-88"/></transition></template><system>// Place template instantiations here.
Philo0 = Philo(0);
Philo1 = Philo(1);
Philo2 = Philo(2);
Philo3 = Philo(3);
Philo4 = Philo(4);


fork0 = Fork(0);
fork1 = Fork(1);
fork2 = Fork(2);
fork3 = Fork(3);
fork4 = Fork(4);

// List one or more processes to be composed into a system.
system Philo0, Philo1, Philo2, Philo3, Philo4, fork0, fork1, fork2, fork3, fork4;</system></nta>